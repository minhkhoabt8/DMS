// <auto-generated />
using System;
using Metadata.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metadata.API.Migrations
{
    [DbContext(typeof(MetadataContext))]
    partial class MetadataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileTag", b =>
                {
                    b.Property<Guid>("FilesID")
                        .HasColumnType("uuid");

                    b.Property<int>("TagsID")
                        .HasColumnType("integer");

                    b.HasKey("FilesID", "TagsID");

                    b.HasIndex("TagsID");

                    b.ToTable("FileTag");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Metadata.Core.Entities.File", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentFolderID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ParentFolderID");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FileEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("FileID");

                    b.ToTable("FileEvent");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FileVersion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<Guid>("FileID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReady")
                        .HasColumnType("boolean");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNumber")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("FileID");

                    b.ToTable("FileVersion");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Folder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentFolderID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ParentFolderID");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FolderEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FolderID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("FolderID");

                    b.ToTable("FolderEvent");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FileTag", b =>
                {
                    b.HasOne("Metadata.Core.Entities.File", null)
                        .WithMany()
                        .HasForeignKey("FilesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metadata.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metadata.Core.Entities.File", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metadata.Core.Entities.Folder", "ParentFolder")
                        .WithMany("Files")
                        .HasForeignKey("ParentFolderID");

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FileEvent", b =>
                {
                    b.HasOne("Metadata.Core.Entities.File", "File")
                        .WithMany("FileEvents")
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FileVersion", b =>
                {
                    b.HasOne("Metadata.Core.Entities.File", "File")
                        .WithMany("Versions")
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Folder", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metadata.Core.Entities.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderID");

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Metadata.Core.Entities.FolderEvent", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Folder", "Folder")
                        .WithMany("FolderEvents")
                        .HasForeignKey("FolderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Metadata.Core.Entities.File", b =>
                {
                    b.Navigation("FileEvents");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("FolderEvents");

                    b.Navigation("SubFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
